@{
    ViewData["Title"] = "Home";
}

<div class="container-fluid mt-4">
    <div class="text-center mb-4">
        <h1 class="display-4">Welcome to the Veteran Application System</h1>
    </div>

    <!-- Totals Section -->
    <div class="row justify-content-center mb-5">
        <div class="col-sm-12 col-md-6 col-lg-4 mb-3">
            <div class="card text-white bg-primary h-100 text-center">
                <div class="card-header">Total Veterans</div>
                <div class="card-body d-flex justify-content-center align-items-center">
                    <h2 class="card-title mb-0">@ViewBag.TotalVeterans</h2>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-md-6 col-lg-4 mb-3">
            <div class="card text-white bg-primary h-100 text-center">
                <div class="card-header">Total Events</div>
                <div class="card-body d-flex justify-content-center align-items-center">
                    <h2 class="card-title mb-0">@ViewBag.TotalEvents</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Interactive Analytics Modal Trigger -->
    <div class="text-center mb-5">
        <button id="openModal" class="btn btn-lg btn-outline-primary">Interactive Analytics</button>
    </div>
</div>

<!-- Interactive Analytics Modal -->
<div id="interactiveModal" class="modal" tabindex="-1" role="dialog" style="display: none; background: rgba(0,0,0,0.8);">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Interactive Analytics</h5>
                <button type="button" id="closeModal" class="close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="xAxisType">Select X-Axis Data:</label>
                    <select id="xAxisType" class="form-control">
                        <option value="gender">Veteran Gender</option>
                        <option value="branch">Veteran Branch</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="yAxisType">Select Y-Axis Data:</label>
                    <select id="yAxisType" class="form-control">
                        <option value="veteran_count">Number of Veterans</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="chartType">Select Chart Type:</label>
                    <select id="chartType" class="form-control">
                        <option value="bar">Bar</option>
                        <option value="pie">Pie</option>
                        <option value="line">Line</option>
                        <option value="doughnut">Doughnut</option>
                        <option value="radar">Radar</option>
                        <option value="polarArea">Polar Area</option>
                        <option value="scatter">Scatter</option>
                    </select>
                </div>
                <button id="updateChart" class="btn btn-secondary">Update Chart</button>
                <canvas id="interactiveChart" width="400" height="200" class="mt-3 w-100"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const genderLabels = @Html.Raw(Json.Serialize(ViewBag.GenderLabels ?? new List<string>()));
        const genderData = @Html.Raw(Json.Serialize(ViewBag.GenderData ?? new List<int>()));
        const branchLabels = @Html.Raw(Json.Serialize(ViewBag.BranchLabels ?? new List<string>()));
        const branchData = @Html.Raw(Json.Serialize(ViewBag.BranchData ?? new List<int>()));

        let chart;
        const ctx = document.getElementById('interactiveChart').getContext('2d');

        const axisLabels = {
            'gender': 'Veteran Gender',
            'branch': 'Veteran Branch',
            'veteran_count': 'Number of Veterans'
        };

        function createChart(type, labels, data, labelText = "Analytics") {
            if (chart) chart.destroy();
            chart = new Chart(ctx, {
                type: type,
                data: {
                    labels: labels,
                    datasets: [{
                        label: labelText,
                        data: data,
                        backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    scales: (type === 'scatter') ? { x: { beginAtZero: true }, y: { beginAtZero: true } } : {}
                }
            });
        }

        document.getElementById('openModal').addEventListener('click', () => {
            document.getElementById('interactiveModal').style.display = 'block';
            createChart('bar', genderLabels, genderData, 'Number of Veterans by Gender');
        });

        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('interactiveModal').style.display = 'none';
        });

        document.getElementById('updateChart').addEventListener('click', () => {
            const xAxisType = document.getElementById('xAxisType').value;
            const yAxisType = document.getElementById('yAxisType').value;
            const chartType = document.getElementById('chartType').value;
            let labels = [];
            let data = [];
            let labelText = "";

            if (xAxisType === 'gender' && yAxisType === 'veteran_count') {
                labels = genderLabels;
                data = genderData;
                labelText = `${axisLabels['veteran_count']} by ${axisLabels['gender']}`;
            } else if (xAxisType === 'branch' && yAxisType === 'veteran_count') {
                labels = branchLabels;
                data = branchData;
                labelText = `${axisLabels['veteran_count']} by ${axisLabels['branch']}`;
            } else {
                alert("Invalid data selection.");
                return;
            }

            if (labels.length === 0 || data.length === 0) {
                alert("No data available.");
                return;
            }

            createChart(chartType, labels, data, labelText);
        });
    </script>
}
